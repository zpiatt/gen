#!/usr/bin/env bash

# Generate: A command-line script file generation tool written in bash 3.2+.
# https://github.com/zpiatt/gen
#
# Copyright (C) 2022-2025 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

readonly version="Generate (gen) version: 2.1.4 - March 6, 2025"

usage() {
    printf "Usage: gen [OPTION]... [FILE]...\n"
    printf "Generate FILE, input script template, and launch default editor.\n\n"
    printf "  -c,   change file permissions with octal or symbolic mode bits\n"
    printf "  -d,   use default template despite available custom template\n"
    printf "  -e,   manually select editor ( gen -e nano example.py )\n"
    printf "  -f,   overwrite existing file contents, never prompt\n"
    printf "  -h,   display help and exit\n"
    printf "  -q,   quiet automatic input of script template\n"
    printf "  -s,   suppress launch of editor\n"
    printf "  -v,   display version number and exit\n\n"
    printf "Full documentation <https://github.com/zpiatt/gen>\n"
    printf "or available locally via: info generate\n"
}

which_ed() {
    local editors ed
    [[ -n "${1:-}" ]] && editors=("$1") || editors=("${VISUAL:-}" "${EDITOR:-}" nano vi emacs ed)

    for ed in "${editors[@]}"; do
        [[ -n "$ed" ]] && { editor="$(command -v "$ed" 2> /dev/null)" && return 0; }
    done

    error "${1:-editor}: not found in PATH." 127
}

gen_template() {
    if [[ -n "${template:-}" ]]; then
        local basename="${file##*/}"
        basename="${basename%.*}"
        printf "%s\n" "${template//basename/${basename}}"
    else
        printf "#!/usr/bin/env %s\n" "$ext"
    fi
}

create_file() {
    local overwrite
    if [[ -f "$file" && -z "${force:-}" ]]; then
        read -erp "gen: overwrite '${file}'? " overwrite
        [[ "$(echo "$overwrite" | awk '{print tolower($0)}')" =~ ^y(es)?$ ]] || exit 0
    fi

    if [[ -f "$file" ]]; then
        chmod "${custom_mode:-${mode:-u+rw}}" "$file" || exit 126
        (:>"$file") &> /dev/null || { printf "gen: %s: Permission denied\n" "$file" >&2; exit 126; }
    else
        (:>"$file") &> /dev/null || { printf "gen: %s: Permission denied\n" "$file" >&2; exit 126; }
        chmod "${custom_mode:-${mode:-u+rw}}" "$file" || { rm -f "$file"; exit 126; }
    fi
}

check_ext() {
    case "${ext:-}" in
        awk) mode="u+rwx" ;;
        lua) mode="u+rwx" ;;
        js) mode="u+rwx"; ext="node" ;;
        pem) quiet=true; read_only=true ;;
        pl) mode="u+rwx"; ext="perl" ;;
        py) mode="u+rwx"; ext="python3" ;;
        sh|bash) mode="u+rwx"; ext="bash" ;;
        *sh) mode="u+rwx" ;;
        *) [[ -z "$template" ]] && quiet=true ;;
    esac
}

get_template() {
    [[ -f "${HOME}/.config/gen/templates/template.${ext}" ]] && \
        template="$(< "${HOME}/.config/gen/templates/template.${ext}")"
}

error() { printf "gen: %s\nTry 'gen -h' for more information.\n" >&2 "$1"; exit "$2"; }

get_args() {
    local option
    while getopts ':hqfdsvc:e:' option; do
        case "$option" in
            q) quiet=true ;;
            f) force=true ;;
            d) default=true ;;
            h) usage; exit 0 ;;
            s) suppress=true ;;
            e) which_ed "$OPTARG" ;;
            v) printf "%s\n" "$version"; exit 0 ;;
            c)
                if [[ "$OPTARG" =~ ^([ugoa]*[-+=][rwxXst]+,?)+$ || "$OPTARG" =~ ^[0-7]{3,4}$ ]]; then
                    custom_mode="$OPTARG"
                else
                    error "invalid mode: $OPTARG" 2
                fi
            ;;

            ?) error "invalid option -- '$OPTARG'" 2 ;;
        esac
    done
    shift "$(( OPTIND -1 ))"

    [[ -z "${1:-}" ]] && error "Must provide filename." 2
    [[ -d "$1" ]] && error "cannot generate '$1': Is a directory" 2

    file="$1"
}

main() {
    get_args "$@"
    [[ "$file" == *.* ]] && ext="${file##*.}"
    [[ -z "${default:-}" && -n "${ext:-}" ]] && get_template
    check_ext
    create_file
    [[ -z "${quiet:-}" ]] && gen_template > "$file"
    [[ -z "${suppress:-}" && -z "${editor:-}" ]] && which_ed
    [[ -z "${suppress:-}" ]] && "$editor" "$file"
    [[ -n "${read_only:-}" ]] && chmod 400 "$file"
    return 0
}

main "$@"
